openapi: 3.0.3
info:
  title: Galadriel Server Management API Specification
  description: |-
    Set of endpoints to be used by Galadriel administrations to define and configure the members, federation groups, memberships and relationships.

    Some useful links:
    - [The Galadriel repository](https://github.com/HewlettPackard/galadriel)
    - [The source API definition for the Galadriel](https://github.com/HewlettPackard/galadriel/tree/main/spec/api)
  termsOfService: https://github.com/HewlettPackard/galadriel
  contact:
    email: malito@galadriel
  license:
    name: TBD
    url: https://github.com/HewlettPackard/galadriel/blob/main/LICENSE.md
  version: 1.0.0
externalDocs:
  description: Find out more about Galadriel
  url: https://github.com/HewlettPackard/galadriel/blob/main/README.md
servers:
  - url: http://localhost:32208/v1
tags:
  - name: members
    description: Manage Galadriel Members
paths:
  /members:
    post:
      tags:
        - members
      description: Create Member
      operationId: createMember
      requestBody:
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: "#/components/schemas/Member"
          application/json:
            schema:
              $ref: "#/components/schemas/Member"
      responses:
        201:
          $ref: "#/components/responses/201MemberCreated"
        400:
          $ref: "#/components/responses/400Error"
        401:
          $ref: "#/components/responses/401Error"
        403:
          $ref: "#/components/responses/403Error"
        405:
          $ref: "#/components/responses/405Error"
        406:
          $ref: "#/components/responses/406Error"
        415:
          $ref: "#/components/responses/415Error"
        429:
          $ref: "#/components/responses/429Error"
        500:
          $ref: "#/components/responses/500Error"
    get:
      tags:
        - members
      description: Returns all the Members
      operationId: getMembers
      parameters:
        - $ref: "#/components/parameters/TrustDomain"
        - $ref: "#/components/parameters/Status"
      responses:
        200:
          $ref: "#/components/responses/200MemberRead"
        400:
          $ref: "#/components/responses/400Error"
        401:
          $ref: "#/components/responses/401Error"
        403:
          $ref: "#/components/responses/403Error"
        405:
          $ref: "#/components/responses/405Error"
        406:
          $ref: "#/components/responses/406Error"
        429:
          $ref: "#/components/responses/429Error"
        500:
          $ref: "#/components/responses/500Error"
  /members/{MemberId}:
    patch:
      tags:
        - members
      description: Updates a Member
      operationId: updateMember
      parameters:
        - $ref: "#/components/parameters/MemberId"
      requestBody:
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: "#/components/schemas/Member"
          application/json:
            schema:
              $ref: "#/components/schemas/Member"
      responses:
        200:
          $ref: "#/components/responses/200MemberRead"
        400:
          $ref: "#/components/responses/400Error"
        401:
          $ref: "#/components/responses/401Error"
        403:
          $ref: "#/components/responses/403Error"
        405:
          $ref: "#/components/responses/405Error"
        406:
          $ref: "#/components/responses/406Error"
        429:
          $ref: "#/components/responses/429Error"
        500:
          $ref: "#/components/responses/500Error"
    delete:
      tags:
        - members
      description: Delete a Member
      operationId: deleteMember
      parameters:
        - $ref: "#/components/parameters/MemberId"
      responses:
        204:
          $ref: "#/components/responses/204MemberDeleted"
        400:
          $ref: "#/components/responses/400Error"
        401:
          $ref: "#/components/responses/401Error"
        403:
          $ref: "#/components/responses/403Error"
        405:
          $ref: "#/components/responses/405Error"
        406:
          $ref: "#/components/responses/406Error"
        429:
          $ref: "#/components/responses/429Error"
        500:
          $ref: "#/components/responses/500Error"
components:
  parameters:
    MemberId:
      name: MemberId
      in: path
      description: Id of the SPIRE server to update
      required: true
      schema:
        type: string
    TrustDomain:
      name: trustDomain
      in: query
      description: Filter by trust domain
      schema:
        type: string
        format: string
    Status:
      name: status
      in: query
      description: Filter by status
      schema:
        type: string
        enum:
          - invited
          - inactive
          - active
  responses:
    200MemberRead:
      description: "Member Read"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/MemberList"
        application/json:
          schema:
            $ref: "#/components/schemas/MemberList"
    201MemberCreated:
      description: "Member Created"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/Member"
        application/json:
          schema:
            $ref: "#/components/schemas/Member"
    204MemberDeleted:
      description: "Member Deleted"
    400Error:
      description: "Bad request"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    401Error:
      description: "Unauthorized"
    403Error:
      description: "Forbidden"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    404Error:
      description: "Not found"
    405Error:
      description: "Method Not Allowed"
    406Error:
      description: "Not Acceptable"
    415Error:
      description: "Unsupported Media Type"
    429Error:
      description: "Too Many Requests"
    500Error:
      description: "Internal Server Error"
      content:
        application/json; charset=utf-8:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    DateTime:
      description: "Date and time associated with the date time type.All dates in the JSON payloads are represented in ISO 8601 date-time format. \nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00"
      type: "string"
      format: "date-time"
    MemberList:
      type: "array"
      items:
          $ref: "#/components/schemas/Member"
    Member:
      # Member is a representation of a trust-domain/Member
      type: object
      properties:
        id:
          type: string
          format: uuid
        trustDomain:
          type: string
          format: string
        description:
          type: string
          format: string
        status:
          type: string
          enum:
            - invited
            - active
            - inactive
        createAt:
          $ref: "#/components/schemas/DateTime"
        updateAt:
          $ref: "#/components/schemas/DateTime"
      required:
        - id
        - trustdomain
        - description
        - status
    Error:
      type: "object"
      properties:
        ErrorCode:
          description: "Low level textual error code, e.g., Field.Missing"
          type: "string"
          x-namespaced-enum:
            - "Field.Expected"
            - "Field.Invalid"
            - "Field.InvalidDate"
            - "Field.Missing"
            - "Field.Unexpected"
            - "Header.Invalid"
            - "Header.Missing"
            - "UnexpectedError"
            - "Unsupported.Scheme"
        Message:
          description: "A description of the error that occurred."
          type: "string"
          minLength: 1
          maxLength: 500
        Path:
          description: "Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency"
          type: "string"
          minLength: 1
          maxLength: 500
        Url:
          description: "URL to help remediate the problem, or provide more information, or to API Reference, or help etc"
          type: "string"
      required:
        - "ErrorCode"
        - "Message"
      additionalProperties: false
      minProperties: 1
    ErrorResponse:
      description: "An array of detail error codes, and messages, and URLs to documentation to help remediation."
      type: "object"
      properties:
        Code:
          description: "High level textual error code, to help categorize the errors."
          type: "string"
          minLength: 1
          maxLength: 40
        Id:
          description: "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors."
          type: "string"
          minLength: 1
          maxLength: 40
        Message:
          description: "Brief Error message, e.g., 'There is something wrong with the request parameters provided'"
          type: "string"
          minLength: 1
          maxLength: 500
        Errors:
          items:
            $ref: "#/components/schemas/Error"
          type: "array"
          minItems: 1
      required:
        - "Code"
        - "Message"
        - "Errors"
      additionalProperties: false